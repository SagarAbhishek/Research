# -*- coding: utf-8 -*-
"""Pre-processing

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/15Mp2D_XTO9rCo-qw6dpttodgtl0njg5K
"""

!pip install pyEDFlib
!pip install mne
import pyedflib
import numpy as np
import mne
import glob
import scipy
from scipy import signal
import pywt
import matplotlib.pyplot as plt
import tensorflow as tf

SZ_Data = []

# labels=[]

path='/content/drive/MyDrive/Research/Pyramid_Model/Databases/Dataset-1/Original dataset-1/1/'
files = glob.glob(path + "/*.edf")
for filename in files:
  data = mne.io.read_raw_edf(filename)
  raw_data = data.get_data()
  SZ_Data.append(raw_data)
  # labels.append(1)

print(len(SZ_Data))

for i in range(len(SZ_Data)):
  print(np.array(SZ_Data[i]).shape)
print( np.array(SZ_Data[1]).shape)

"""**normalise**"""

SZ_Data[0]

normalise_SZ_data=[]
for i in  range(len(SZ_Data)):
  std=np.std(SZ_Data[i],axis=1)
  mean=np.mean(SZ_Data[i],axis=1)
  SZ_Data[i]=(SZ_Data[i].transpose()-mean.transpose()).transpose()
  SZ_Data[i]=(SZ_Data[i].transpose()/std.transpose()).transpose()
  normalise_SZ_data.append(SZ_Data[i])

normalise_SZ_data[3]

"""**windowing**"""

winSize=250*4 # Size of data point (data of 8 sec)
stride=250*1  # sliding window with length winSize and stride 1 sec
count=0
windowing_SZ_data=[]
for i in range(0,np.shape(normalise_SZ_data[3])[1]-winSize,stride):
  count+=1
  if len(np.shape(windowing_SZ_data))>1:
    windowing_SZ_data=np.dstack((windowing_SZ_data,normalise_SZ_data[3][:,i:i+winSize]))
  else:
    windowing_SZ_data=np.reshape(normalise_SZ_data[3][:,i:i+winSize],(19,np.shape(normalise_SZ_data[3][:,i:i+winSize])[1],1))

print(count)

np.array(windowing_SZ_data).shape

"""**Generated Image**"""

from matplotlib import pyplot as plt
import numpy as np
w = 3
h = 2
d = 100
k = 0
path = '/content/drive/MyDrive/Research/SZ dataset/Institute of Psychiatry and Neurology in Warsaw, Poland/without_overlap/parkinson_images/1/'
plt.figure(figsize=(w, h), dpi=d)
cmap = plt.get_cmap('viridis')
for i in range(0,count):
  plt.pcolormesh(windowing_SZ_data[:,:,i],cmap=cmap)
  plt.axis('off')
  plt.savefig(path+'PD-SZ-14-OF-'+str(i)+'.png', bbox_inches='tight', pad_inches = 0)
  k = k+1
  print(k)